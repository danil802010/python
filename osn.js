let per;
per='<table border="1"><td id="lev"><h3>Левые</h3>'
//+'<div class="photo">'
+'<a><img src="https://i.postimg.cc/50zwsNzt/fonpy.jpg" '
+'width="340" hight="220"><figcaption>'
+'python явно</figcaption></img/a/div>'
+'<table border="1"><caption>Для начала ключевые слова</h4></caption>'
+'<tr><td>False</td><td>await</td><td>else</td><td>import</td><td>pass</td></tr>'
+'<tr><td>None</td><td>break</td><td>except</td><td>in</td><td>raise</td></tr>'
+'<tr><td>True</td><td>class</td><td>finally</td><td>is</td><td>return</td></tr>'
+'<tr><td>and</td><td>continue</td><td>for</td><td>lambda</td><td>try</td></tr>'
+'<tr><td>as</td><td>def</td><td>from</td><td>nonlocal</td><td>while</td></tr>'
+'<tr><td>assert</td><td>del</td><td>global</td><td>not</td><td>with</td></tr>'
+'<tr><td>async</td><td>elif</td><td>if</td><td>or</td><td>yield</td></tr>'
+'</table>'
+'<br><i style="color:yellow">Данные слова не должны упоминаться в названиях</i><hr>'
+'<a>Также надо различать Camel case - userName!<br>'
+'и Undeskore notation - user_name<br>'
+'В python очень сильна регистрозависимость:<br>name="Tom" и Name="Tom"'
+' - две разные переменные</a>'
+'<li>Выведение переменной на консоль:<br>name="Bob" #name переменная<br>'
+'print(name) #вывод значения переменной//Bob вышел(в ходе программы значение '
+'можно изменить)</li>'
+'<ul><b>Типы данных</b><br>'
+'<li><i>Логические значения (bool)</i><br>Представляет два значения: true и false.</li>'
+'<li ><i>Целые числа</i><br>int - 1,4,120 и т.д.<br>Для указания двоичной системы '
+'впереди ставится 0b.<br>'
+'a=0b11 <br>print(a) #3<br>'
+'b=0b1011<br>'
+'print(b) <i>//11</i><br>'
+'c=ob100001<br>'
+'print(c) 33<br>'
+'</li>'
+'<li><b>Целые числа</b><br>'
+'<i>Двоичная система:</i><br>'
+'a=0b11<br>'
+'print(a) <i>//3 - в десятичной</i><br>'
+'<i>Восьмеричная система: </i><br>'
+'b=0o11<br>print(b) <i>//9 - в десятичной</i><br>'
+'<i>Шестнадцатеричная:</i><br>'
+'c=0xA1<br>'
+'print(c) <a>//161</a><br>'
+'</li>'
+'<li><b>Дробные числа(float)</b><br>'
+'pi=3.14<br>'
+'print(pi) <i>//3.14</i><br>'
+'<i>С плавающей точкой</i><br>'
+'x=4.7e5<br>print(x) <i>470000.0</i><br></li>'
+'<li><b>Комплексные числа</b><br>'
+'complexNumber=1+2j<br>'
+'print(complexNumber) <i>//(1+2j) - точка в двоичной системе координат</i><br></li>'
+'<li><b>Строки</b><br>'
+'message="Hello World!"<br>'
+'print(message) <i>#Hello World!</i><br><li><li>'
+'<table border="1"><center>Направление арифметических операций</center>'
+'<tr><td  style="color:#a44">Операции</td><td  style="color:#a04">Направление</td></tr>'
+'<tr><td>**</td><td>Справо налево</td></tr>'
+'<tr><td>*/ //%</td><td>Слева направо</td></tr>'
+'<tr><td>+-</td><td>Слева направо</td></tr></table>'
+'<i>Пример:</i><br>'
+'number=4+5*6**2+7<br>'
+'print(number) <i>//191 (возведение в степень, умножение, первое сложение,второе сложение)</i><br>'
+'<i>Через скобки можно изменить порядок</i><br>'
+'number=(4+5)*(6**2+7)<br>'
+'print(number) <i>//387 (умножение в последнюю очередь)</i><br></li><li>'
+'<a>Арифметические операции с присвоением:</a><br>'
+'<b>(+=)</b>&ensp;Присвоение результата сложения<br>'
+'<b>(-=)</b>&ensp;Присвоение результата вычитания<br>'
+'<b>(*=)</b>&ensp;Присвоение результата умножения<br>'
+'<b>(/=)</b>&ensp;Присвоение результата от деления<br>'
+'<b>(//=)</b>&ensp;Присвоение результата целочисленного деления<br>'
+'<b>(**=)</b>&ensp;Присваиваем степень числа<br>'
+'<b>(%=)</b>&ensp;Присваиваем остаток от деления<br>'
+'<i>Примеры:</i><br>'
+'number=10<br>'
+'number+=5<br>'
+'print(number) <i>//15(логично)</i><br>'
+'number-=3<br>'
+'print(number) <i>//12 (используем предыдущий ответ)</i><br>'
+'number *=4<br>print(number) <i>//48 (и ведь не поспоришь)</i><br></li><li>'
+'<a>Округление и функция round</a><br>'
+'<i>При работе с float результат может быть не точным</i><br>'
+'>>> first_number=2.0001<br>'
+'>>> second_number=5<br>'
+'>>> third_number=first_number/second_number<br>'
+'>>> print(third_number) #0.40002000000000004<i>(_опачки,<br>'
+' просто надо запомнить это безобразие)</i><br>'
+'<i>Или ещё: </i>print(2.0001+0.1) #2.1001000000000003<br>'
+'&ensp;<b>Тут мы можем использовать функцию round()</b><br><i>Округляем:</i><br>'
+'>>> first_number=2.0001<br>'
+'>>> second_number=0.1<br>'
+'>>> third_number=first_number+second_number<br>'
+'>>> print(round(third_number)) <i>#2 (до целого)</i><br>'
+'&ensp;<b>Также можно указать количество знаков после запятой</b><br>'
+'first_number=2.0001<br>'
+'second_number=0.1<br>'
+'third_number=first_number+second_number<br>'
+'>>> print(round(third_number,4)) <i>//2.1001</i><br>'
+'&ensp;<i>#округляем до ближайшего целого</i><br>'
+'>>> print(round(2.49)) <i>//2</i><br>'
+'>>> print(round(2.51)) <i>//3</i><br>'
+'&ensp;<i>округление до ближайшего целого</i><br>'
+'>>> print(round(2.5)) <i>//2</i><br>'
+'>>> print(round(3.5)) <i>//4</i><br>'
+'&ensp;<i>до ближайшего кратного 10 минус округляемая часть</i><br>'
+'<i>//до двух знаков после запятой:</i><br>'
+'>>> print(round(2.554,2)) //<i>2.55</i><br>'
+'>>> print(round(2.5551,2)) //<i>2.56</i><br>'
+'>>> print(round(2.554999,2)) //<i>2.55</i><br>'
+'>>> print(round(2.499,2)) //<i>2.5</i><br>'
+'</li></ul>'
+'<ol><li>Условная конструкция <b>if</b><br>'
+'if логическое_выражение:<br>'
+'&ensp;инструкции<br>'
+'[eliaf логическое выражение:<br>'
+'&ensp;инструкции]<br>'
+'[else:<br>&ensp;инструкции]<hr>'
+'lang = "eng"<br>'
+'if lang == "eng":<br>'
+'<i>4" "</i>&ensp;print("Hello")<br>'
  +'  print("End")<br>'
+'<i>//Hello<br>'
+'//End</i><br></li><li>'
+'<a>Блок else</a><br>'
+'language = "russian"<br>'
+'&ensp;if language == "english":<br>'
  +'  print("Hello")<br>'
+'&ensp;else:<br>'
  +'  print("Привет")<br>'
+'    print("End") <i>//выводит в зависимости от языка</i><hr>'
+'<a>elif</a><br>'
+'language = "german"<br>'
+'if language == "english":<br>'
    +'print("Hello")<br>'
  +'  print("world")<br>'
+'elif language == "german":<br>'
    +'print("Hallo")<br>'
  +'  print("welt")<br>'
+'else:<br>'
    +'print("Привет")<br>'
  +'  print("мир")<br>'
+'	<i>//Hallo welt</i><br>'
+'<a>Если есть необходимость, то выделяют много elif</a><br>'
+'language = "German"<br>'
+'if language == "english": print("Hello")<br>'
+'elif language == "German": print("Hallo")<br>'
+'elif language == "french": print("Salut")<br>'
+'else: print("Привет")<br>'
+'<i>//Hallo</i><br></li><li>'
+'<a>Вложенные конструкции if</a><br>'
+'<i>данная конструкция может быть вложенной внутрь себе подобной</i><br>'
+'lang = "eng"<br>'
+'daytime = "morning" <i>//"evening"</i><br>'
+'if lang == "eng": print("English")<br>'
+'if daytime == "morning": print("Good morning")<br>'
+'else: print("Good evening")<br>'
+'<i>//English Good morning/evening</i><br>'
+'<a>Блоки можно менять местами:</a> <i>делать вложения.</i><br>'
+'lang = "Rus"<br>'
+'daytime = "morning"<br>'
+'if lang == "Eng":<br>'
+'    if daytime == "morning":<br>'
      +'  print("Good morning")<br>'
    +'else:<br>'
  +'      print("Good evening")<br>'
+'else: <br>'
+'    if daytime == "morning":<br>'
      +'    print("Доброе утро")<br>'
    +'else: <br>'
  +'       print("Добрый вечер")<br>'      
+'<i>//Доброе утро (так как eng вложенный параметр)</i><br>'
+'</li></ol>'
+'</td><td id="prav">'
+'<ul style="margin-top:0"><h3>Поразрядные операции с чиcлами</h3>'
+'<li><a>Двоичное представление чисел</a><br>'
+'Ставится спецификатор 0b:<br>'
+'>>> number=5 <i>//десятичная система</i><br>'
+'>>> print(f "number={number:0b}")<br>'
+'number=101 <i>//система двичная(0b)</i><br>'
+'&ensp;<i>ещё пример:</i><br>'
+'>>> number=12 <a>(десятичная)</a><br>'
+'>>> print(f "number={number:0b}") <i>//number=1100</i><br>'
+'>>> number=0b1100 <a>(двоичная)</a><br>'
+'>>> print(f "number={number}") <i>//number=12</i><br></li>'
+'<li><a>логические операции</a><br>'
+'*<b> & </b>(логическое умножение)<br>'
+'>>> x1=2<br>'
+'>>> y1=4<br>'
+'>>> z1=x1*y1 <i>//(*)</i><br>' 
+'>>> print(f "z1={z1}") <i>//z1=8 результат умножения</i><br>'
+'>>> z1=x1&y1  <i>//(&)</i><br>'
+'>>> print(f "z1={z1}") <i>//z1=0 логическое умножение</i><br>'
+'<br>>>> x2=4<br>'
+'>>> y2=5<br>'
+'>>> z2=x2&y2<br>'
+'>>> print(f "z2={z2}") <i>//z2=4 (десятичное)</i><br>'
+'>>> print(f "z2={z2:0b}") <i>//z2=100 (двоичное)</i><hr>'
+'*<b> | </b>(логическое сложение)<br>'
+'>>> x1=2>>> y1=5>>> z1=x1|y1<br>'
+'>>> print(f "z1={z1}") <i>//z1=7 (десятичная)</i><br>'
+'>>> print(f "z1={z1:0b}") <i>//z1=111 (двоичная)</i><br><br>'
+'>>> x2=4>>> y2=5>>> z2=x2|y2<br>'
+'>>> print(f "z2={z2}") <i>//z2=5</i><br>'
+'>>> print(f "z2={z2:0b}") <i>//z2=101</i><hr>'
+'*<b> ^ </b>(логическое(!) искючающее ИЛИ - XOR)<br>'
+'>>> x=9>>> y=5>>> z=x^y<br>'
+'>>> print(f "z={z}") <i>//z=12 (10-ая)</i><br>'
+'>>> print(f "z={z:0b}") <i>//z=1100 (2-ая)</i><br><br>'
+'<h4 style="margin-left:30px;margin-top:-20px;margin-bottom:-20px;'
+'color:#074">пример простого шифрования:</h4><br>'
+'>>> x=45 #надо зашифровать<br>'
+'>>> key=102 #ключ в двоичной форме 11001100<br>'
+'>>> encrypt=x ^ key<br>'
+'>>> prynt(f "Зашифрованное число: {encrypt}")<br>'
+'<a>Зашифрованное число: 75</a><br>'
+'>>> decrypt=encrypt ^ key<br>'
+'>>> print(f "Расшифрованное число:{decrypt}")<br>'
+'<a>Расшифрованное число:45</a><br>'
+'<i>Обмен значений между переменными:</i><br>'
+'>>> x=9 <i>#1001</i><br>'
+'>>> y=5 <i>#0101</i><br>'
+'>>> x=x^y>>> y=x^y>>> x=x^y<br>'
+'>>> print(f"x={x}") <i>//x=5</i><br>'
+'>>> print(f"y={y}") <i>//y=9</i><hr>'
+'*<b>~ </b>(инверсия) <i>~x аналогично -(x+1)</i><br>'
+'>>> x=5<br>'
+'>>> y=~x<br>'
+'>>> print(f"y:{y}") <i>//y:-6</i><br></ul>'
+'<b>Операции сдвига</b><br>'
+'<ul><i>Происходить может и вправо и влево</i><br>'
+'<li type="disc">x&lt;&lt;y - сдвигает число x влево на y разрядов. 4<<1 сдвигает число 4 '
+'(100 в двоичном представлении) на один разряд влево. Получаем 1000 или 8 в десятчном '
+'представлении</li>'
+'<li type="disc">x>>y - сдвигает число x вправо на y разрядов. 16>>1 - сдвигаем число 16(10000) '
+'на один разяд вправо и получаем 1000 или 8 в десятичном представлении.</li>'
+'Всё чётные числа можно считать подобным образом<br>'
+' >>> a=16 <i>#10000 в двоичной форме</i><br>'
+'>>> b=2<br>'
+'>>> c=a&lt;&lt;b <i>#сдвиг влево на два разряда (1000000-двоичная)</i><br>'
+'>>> print(c) <i>//64 (десятичная)</i><br>'
+'>>> d=a>>b<br>'
+'>>> print(d) <i>//4</i><br>'
+'<i>кратность двум при этом не обязательна:</i><br>'
+'>>> a=22 <i>#в двоичной 10110</i><br>'
+'>>> b=2<br>'
+'>>> c=a&lt;&lt;b <i>#сдвиг 10110 влево на два разряда(1011000)</i><br>'
+'>>> print(c) <i>//88</i><br>'
+'>>> d=a>>b <i>#сдвиг 10110 вправо на два разряда(101)</i><br>'
+'>>> print(d) <i>//5</i><br>'
+'<a><center>Битовые операции сдвига<br><img src="https://i.postimg.cc/PvPHxWHh/boz.png"width="70%"></center/a>'
+'</li></ul>'
+'<ol><a>Условные выражения</a><br>'
+'<i>Имеют два логических значения:<br> <b>True</b>(истинно) <b>и False</b> (ложно)</i><br>'
+'<li><i>Операции сравнения</i><br>'
+'*<b>==</b> - возращает True, если оба операнда равны. Иначе false<br>'
+'*<b>!=</b> - True, если не равны. Иначе False<br>'
+'*<b>><i>(больше чем)</i></b>Возращает True, если первый операнд больше второго <br>'
+'*<b><<i>(меньше чем)</i></b>Возвращает True, если первый операнд меньше второго<br>'
+'*<b>>=<i>(больше или равно)</i></b>Возращает True, если первый больше или равен второму.<br>'
+'*<b><=<i>(меньше или равно)</i></b>Возаращает True, если первый операнд меньше или '
+'равен второму.<br></li>'
+'<li><a><center>Логические операции<br><img src="https://i.postimg.cc/y850xHMM/logo.jpg" '
+'title="логические операции" width="300"></center></a><br>'
+'<li type="disc">Оператор <b>and </b>(логическое умножение)<br>'
+'x<i>and </i>&ensp;y<br>'
+'>>> age=22 <i>//один операнд</i><br>'
+'>>> weight=58 <i>//операнд номер два</i><br>'
+'>>> result=age>21 and weight==58 <i>//логическое выражение</i><br>'
+'>>> print(result) <i>//True (логический ответ)</i><br>'
+'<br><i style="color:#333">Использовать можное не только значения true и false</i><br>'
+'>>> result=4 and "w"<br>'
+'>>> print(result) <i>//w, так как 4 равно true, то возвращается последний операнд</i><br>'
+'<br>>>> result=0 and "w"<br>'
+'>>> print(result) <i>//0, так как ответ 0~false</i><br></li>'
+'<li type="disc">Оператор <b>or </b>(логическое сложение)<br>'
+'<i>И тоже к двум операторам применяется:</i><br>'
+'x or y<br>'
+'<i>Если x равно True, возвращается оно. Если False, то оценивается другой и возвращается '
+'его значение</i><br>'
+'>>> age=22<br>'
+'>>> isMarried=False<br>'
+'>>> result=age>21 or isMarried<br>'
+'>>> print(result) <i>//True, так как age>21</i><br>'
+'<i style="color:#777">Значения  при использовании or могут быть любыми:</i><br>'
+'>>> result=4 or "w"<br>'
+'>>> print(result) <i>//4, так как эквивалентно True</i><br>'
+'<i>и</i><br>>>> result=0 or "w"<br>'
+'>>> print(result) <i>//w, так как 0 эквивалентно False(поэтому последний)</i><br>'
+'</li>'
+'<li type="disc">Оператор <b>not </b>(логическое отрицание)'
+'<i>возвращает True, если выражение равно False</i><br>'
+'>>> age=22<br>'
+'>>> isMarried=False<br>'
+'>>> <a style="margin:5px">print</a>(not age>21) <i>#False</i><br>'
+'>>> <a style="margin:10px">print</a>(not isMarried) <i>#True</i><br>'
+'>>> <a style="margin:10px">print</a>(not 4) <i>#False</i><br>'
+'>>> <a style="margin:5px">print</a>(not 0) <i>#True (просмотреть результаты надо тихо и вдумчиво)</i><br>'
+'</li></li>'
+'<li>Оператор <b>in</b> расмотрим<br>'
+'<i>Возвращает <b style="margin:0">true</b>, если имеется заданное значение</i><br>'
+'значение <a style="margin:0">in</a> набор_значений. Пример:<br>'
+'>>> message="Hello world!"<br>'
+'>>> hello="Hello"<br>'
+'>>> print(hello in message) <i>#True (hello имеется в message)</i><br>'
+'>>> gold="gold"<br>'
+'>>> print(gold in message) <i>#False (подстроки gold нет в message)</i><hr>'
+'обратное действие - оператор <b style="margin:0">not in</b><br>'
+'>>> print(hello not in message) <i>#False (каково, а...)</i><br>'
+'>>> gold="gold"<br>'
+'>>> print(gold not in message) <i>#True (правильно, нет такого значения)</i><br></li></ol>'
+'</td></table>'
let cik;
cik='<table><td id="lev">'
+'<ol><h3>Поговорим про циклы</h3>'
+'<li><b>while циклы</b><br>'
+'<div style="color:green">while</div> условное_выражение: инструкции<br>'
+'number = 1<br>'
+'<i>/*отступ - 1 строка*/</i><br>'
+'while number < 5:<br>'
    +'print(f"namber={number}")<br>'
  +'  number += 1<br>'
+'print("Программа сделала exit") <i>//отступов нет, инструкция в цикл не входит</i><br>'
+'<i>namber=1<br>'
+'namber=2<br>'
+'namber=3<br>'
+'namber=4<br>'
+'Программа сделала exit</i><br>'
+'<i>Блок цикла состоит из двух инструкций:</i><br>'
+'a) print(f"number={number}")<br>'
+'b) number += 1<br>'
+'<i>также можно использовать дополнитьельно блок else: </i><br>'
+'number = 1<br>'
+'<i>не забываем</i><br>'
+'while number < 5:<br>'
    +'print(f"namber={number}")<br>'
  +'  number += 1<br>'
+'else:<br>'
  +'  print(f"number={number}. Работа цикла завершена")<br>'    
+'print("Работа программы завершена")<br>'
+'<i>namber=1<br>'
+'namber=2<br>'
+'namber=3<br>'
+'namber=4<br>'
+'number=5. Работа цикла завершена<br>'
+'Работа программы завершена</i><br>'
+'<i style="color:blue">Но блок else может быть полезным: </i><br>'
+'number = 10<br>'
+'<br>'
+'while number < 5:<br>'
    +'print(f"number={number}")<br>'
  +'  number += 1<br>'
+'else:<br>'
  +'  print(f"number={number}. Zikl exit")<br>'
+'print("Work soft exit") <br>'
+'<i>number < 5 изначально равно false и сразу работает инструкция else</i></li>'
+'<li><b>Цикл for</b><br>'
+'<b style="color:green;margin:0">for</b> переменная <b style="color:green;margin:0">in</b> набор_значений:<br>'
+'&ensp;инструкции<br>'
+'<i>пример:</i><br>'
+'message = "Hello"<br><br>'
+'for c in message:<br>'
+'    print(c) <i>// H e l l o</i><br>'
+'<a>range()</a> - генерирует числовую последовательность<br>'
+'>>> for n in range(10):<br>'
+'...     print(n,end=" ")<br>'
+'...<br>'
+'<a>0 1 2 3 4 5 6 7 8 9</a><br>'
+'<i>прикольное последнее значение назначим:</i><br>'
+'<a>Передадим диапазон:</a><br>'
+'for n in range(5, 15):<br>'
  +'  print (n,end=" ")<br>'
+'    <i>//5 6 7 8 9 10 11 12 13 14 </i><br>'
+'<a>приращение 2:</a><br>'
+'for n in range(5, 15, 2):<br>'
  +'  print(n, end=" ")<br>'
+'<i>//5 7 9 11 13</i> <br>'
+'<i>for также может иметь дополнительный блок else(выполняется '
+'в последнюю очередь)</i><br>'
+'message="Hello"<br>'
+'for c in message:<br>'
  +'  print(c)<br>'
+'else:<br>'
  +'  print(f"Последний символ: {c}. Цикл завершён")<br>'
+'print("Программа завершена")  <br>'
+'<i>//H e l l o<br>'
+'//Последний символ: o. Цикл завершён<br>'
+'//Программа завершена</i><br></li><li>'
+'<a>Вложенные циклы</a><br>'
+'<i>Одни циклы могут содержать другие. Таблицу умножения посмотрим:</i><br>'
+'i = 1<br>'
+'j = 1<br>'
+'while i < 10:<br>'
+'    while j < 10:<br>'
        +'print(i * j, end = "\t")<br>'
      +'  j += 1<br>'
    +'print("\n")<br>'
  +'  j = 1<br>'
+'    i += 1    <br><i>'
+'1 2 3 4 5 6 7 8 9<br>'
+'2 4 6 8 10 12 14 16 18<br>'
+'3 6 9 12 15 18 21 24 27<br>'
+'4 8 12 16 20 24 28 32 36<br>'
+'5 10 15 20 25 30 35 40 45<br>'
+'6 12 18 24 30 36 42 48 54<br>'
+'7 14 21 28 35 42 49 56 63<br>'
+'8 16 24 32 40 48 56 64 72<br>'
+'9 18 27 36 45 54 63 72 81</i><hr>'
+'<i>Подобным образом определяется вложенный цикл for:</i><br>'
+'for c1 in "ab":<br>'
    +'&ensp;for c2 in "ba":<br>'
  +'&ensp;&ensp;print(f"{c1}{c2}")<br>'
+'&ensp;<i>//ab aa bb ba</i><br></li><li>'
+'<a>Выход из цикла. break и continue</a><br>'
+'<i>break - выход из цикла<br>continue - переход к следующей итерации(чтобы это не значало)</i>'
+'<br>number = 0<br>'
+'while number < 5:<br>'
   +'&ensp; number += 1<br>'
 +'   if number == 3: <i>//если number = 3,</i><br>'
    +' &ensp;   break      <i>//выходим из цикла</i><br>'
  +'  print(f"number={number}")<br>'
+'    <i>//number=1 number=2</i><br><br>'
+'<i>и continue, и чем отличается от break:</i><br>'
+'number = 0<br>'
+'while number < 5:<br>'
  +'  &ensp;number += 1<br>'
+'    &ensp;if number == 3:<br>'
    +'    &ensp;&ensp;continue <i>//был break</i><br>'
  +'  &ensp;print(f"number={number}")<br>'
+'	<i>//number=1 number=2 number=4 number=5(нет number 3)</i><br>'
+'</li>'
+'<a>Что-то нарисуем:</a><br>'
+'</ol>'
+'</td><td id="prav">'
+'<ol><h4>Функции</h4>'
+'<li><a>print()</a><br>'
+'def имя_функции ([параметры]):<br>'
+'&ensp;&ensp;&ensp;&ensp;инструкции<hr>'
+'def say_hello():<br><a style="margin-left:30px">'
  +'  print("Hello")</a><br>'
+'say_hello()    <i>//Hello</i><hr>'
+'def say_hello(): print("Hello") <i>//можно в одной строке</i><br>'
+'def say_goodbye(): print("Good Bye") <i>//если инструкция одна</i><br>'
+'say_hello()<br>'
+'say_goodbye()<br>'
+'<i>Hello<br>'
+'Good Bye</i> <br>'
+'</li>'
+'<li type="disc"><a>Локальные функции</a><br>'
+'def print_message():<br>'
+'<i>#определяем локальный функции</i><br>'
   +' def say_hello(): print("Hello")<br>'
 +'   def say_goodbye(): print("Good Bye")<br>'
 +'<i>#вызываем локальные функции</i><br>'
    +'say_hello()<br>'
  +'  say_goodbye()   <br>' 
  +'<i>#Вызываем объявленную функцию</i><br>'
  +'print_message()<br>'
  +'say_hello() <i>#вне основной функции, поэтому недоступна</i><br>'
+'print_message()<br>'
+'<i>//Hello<br> Good Bye</i><br>'
+'<img src="https://i.postimg.cc/tTCNwhcN/plk.png">'
+'</li>'
+'<li><a>Организация программы и функции main</a><br>'
+'def main():<br>'
    +'<div>say_hello()<br>'
  +'  say_goodbye()</div><br>'
+'def say_hello():<br>'
  +'  <div>print("Hailo")</div><br>'
+'def say_goodbye():<br>'
  +'  <div>print("Good Bye")</div><br>'
  +'<i>вызываем это чудо:</i><br>'
+'main()<br>'
+'<i>//Hailo<br>//Good Bye</i><br></li>'
+'<li><a>Функция:</a><br>'
+'def say_hello(name):<br>'
  +'  print(f"Hello, {name}")<br><i>//пропуск строки</i><br>'
+'say_hello("Gorgona")<br>'
+'say_hello("Gerakl")<br>'
+'say_hello("Mars")  <br>'
+'<i>//Hello, Gorgona;Hello, Gerakl;Hello, Mars</i><br>'
+'<i style="font-size:16pt;color:green">Значения при вызове функции передаются параметрами '
+'по позиции:</i><br>'
+'def print_pers(name, age):<br>'
    +'print(f"Name: {name}")<br>'
  +'  print(f"Age: {age}")<br><i>Пропуск строки(следить строго)</i><br>'
+'print_pers("Bob", 40)    <br>'
+'<i>//Name: Bob; Age: 40</i><br></li><li>'
+'<a>Значения по умолчанию</a><br>'
+'def say_hello(name="Bob"):<br>'
  +'  print(f"Hello, {name}")<br><br>'
+'say_hello()   <i>//Hello, Bob</i><br>'
+'say_hello("Frank")    <i>//Hello, Frank</i><br>'
+'<a><img src="https://i.postimg.cc/752xzwxV/zpu.jpg">'
+'<i>Потом можем изменить</i></a>'
+'<i>Параметры можно сделать необязательными:</i><br>'
+'def print_person(name = "Bom", age=18):<br>'
  +'  print(f"Name: {name} Age: {age}")<br>'
+'print_person() <i>//Name: Bom Age: 18</i><br>'
+'print_person("Frank") <i>//Name: Frank Age: 18</i><br>'
+'print_person("Senja",37) <i>//Name: Senja Age: 37</i>  <br></li><li>'
+'<a>Передача значнеий парметрам по именам. Именованные параметры</a><br>'
+'<i>Primer:</i><br>'
+'def print_person(name, age):<br>'
  +'  print(f"Name: {name} Age: {age}")<br>'
+'print_person(age=32, name="Bob")     <br>'
+'<i>//Name: Bob Age: 32</i>   <br>'
+'<i style="color:green">Символ *, который ставят слоева указывает, что значение можно передать только '
+'по имени.</i><br>'
+'def print_person(name, *, age, company):<br>'
  +'  print(f"Name: {name} Age: {age} Company: {company}")<br>'
+'print_person("Jack",age=47,company="Haval")    <br>'
+'<i>//Name: Jack Age: 47 Company: Haval(Name указан)</i><br>'
+'<hr><i style="font-size:13pt;color:maroon">Сделаем Name-параметр именованным:</i><br>'
+'def print_person( name, *, age, company):<br>'
  +'  print(f"Name: {name} Age: {age} Company: {company}")<br>'
+'print_person("Wlad",age=50, company="svalka")<br>'
+'<i>//Name: Wlad Age: 50 Company: svalka</i><br>'
+'<i>Все парметры, которые находятся справа от звёздочки, являются именованными.</i><br>'
+'<i style="color:#ff4;font-size:13pt">А если вместо * идёт /, то все параметры будут позиционными'
+'(разбирайся сам, но позицию не поменять)</i><br>'
+'def print_person(name, /, age,company="Micro"):<br>'
  +'  print(f"Name: {name} Age: {age} Company: company")<br>'
+'print_person("Wall", company="dvor", age=20) <br>'
+'<i>//Name: Wall Age: 20 Company: company (как прикольно)</i><br>'
+'print_person("Jack",45)<br>'
+'<i>//Name: Jack Age: 45 Company: company (параметры поменялись)</i><br></li><li>'
+'<a>Неопределённое количество параметров</a><br>'
+'<a style="font-size:13pt;color:green">Символ * разрешает указывать несколько '
+'параметров</a><i>(что они имеют в виду...)</i><br>'
+'def sum(*num):<br>'
   +' result = 0<br>'
 +'   for n in num:<br>'
    +'    result += n<br>'
  +'  print(f"sum = {result}")<br>'
+'sum(1, 3, 5, 7)<br>'
+'sum(10, 8, 6, 4)  <br>'
+'<i>//sum = 16<br>'
+'//sum = 28</i><br>'
+'</li></ol>'
+'</td></table>'
let ret;
ret='<table><td id="lev">'
+'<ol>Оператор return и возвращение результата из функции.'
+'<li><b>Возвращение результата</b><br>'
+'<i>Объясняю на пальцах:</i><br>'
+'def имя_функции ([параметры]):<br>'
  +'  <div style="margin-left:30px">инструкции<br>'
	+'return возращаемое_значение</div>'
+'<i style="color:#555;">Опеределим простейшую функцию</i><br>'
+'def get_message():<br>'
  +'&ensp;  return "Hello METANIT.COM"<br>'       
+'message = get_message() <br>'
+'print(message)<br>'
+'<i>//Hello METANIT.COM</i><br><i style="margin-left:5px;color:#234">Ещё пример:</i><br>'
+'def double(num):<br>'
  +'&ensp;  return 2 * num<br>'
+'result = double(7.5)<br>'
+'res=double(9.4)<br>'
+'print(f"result = {result}")<br>'
+'print(f"res={res}")<br>'
+'<i>//result = 15.0<br>'
+'//res=18.8</i><br>'
+'<i style="color:maroon">пример со сложением:</i><br>'
+'def sum(a, b):<br>'
  +'&ensp;  return a+b<br>'
+'result = sum(7, 8)<br>'
+'print(f"sum(7, 8) = {result}")<br>'
+'print(f"sum(6,9) = {sum(6, 9)}"<br>'
+'<i>//sum(7, 8) = 15<br>'
+'//sum(6,9) = 15</i><br>'
+'</li>'
+'<li><b>Выходим из функции</b> return не только возвращает, но и инициализирует '
+'выход.<br>'
+'def get_m():<br>'
    +'return "Hello Metamit.com"<br>'
  +'  print("End of the function") <i>//синтаксис верен, но строка никогда не '
+'выполнится,т.к return возвратит результат и произведёт выход из функции</i><br>'
+'print(get_m())<br>'
+'<i>//Hello Metanit.com</i><br>'
+'<a>Можно просто выйти:</a><br>'
+'def print_p(name, age):<br>'
+'&ensp;    if age > 120 or age < 1:<br>'
      +'&ensp;&ensp;  print("Invalid age")<br>'
    +'&ensp;&ensp;    return <i>//условие если верно, то выход</i><br>'
  +'&ensp;  print(f"Name: {name} Age: {age}")<br>'
+'print_p("Bobik", 33)<br>'
+'print_p("Tomio", -400)   <i>// ! (if условие)</i><br>'
+'<i>//Name: Bobik Age: 33<br>'
+'//Invalid age</i><br></li>'
+'<li><b>Функция как тип, параметр и результат другой функции</b><br>'
+'<a>Функция как тип</a><br>'
+'def say_h(): print("Privet")<br>'
+'def say_g(): print("Poka")<br><br>'
+'message = say_h<br>'
+'message()<br>'
+'message = say_g<br>'
+'message()<br>'
+'<i>//Privet<br>'
+'//Poka</i><br>'
+'<a>Можно с параметрами:</a><br>'
+'def do_oper(a, b, operation):<br>'
    +'result = operation(a, b)<br>'
  +'  print(f"result= {result}")<br><br>'
+'def sum(a, b): return a + b<br>'
+'def multiply(a, b): return a * b<br><br>'
+'do_oper(5, 4, sum)<br>'
+'do_oper(5, 4, multiply)<br>'
+'<i>//9<br>//20</i><br></li>'
+'<li><b>Функия как результат функции</b><br>'
+'<div>def sum(a, b): return a + b<br>'
+'def subtract(a, b): return a - b<br>'
+'def multiply(a, b): return a * b</div><br>'
+'def select_oper(choice):<br>'
    +'&ensp;if choice == 1:<br>'
  +'  &ensp;&ensp;    return sum<br>'
+'   &ensp; elif choice == 2:<br>'
      +'&ensp;&ensp;  return subtract<br>'
    +'&ensp;else:<br>'
  +'   &ensp;&ensp;   return multiply<br>'
+'oper = select_oper(1)<br>'
+'print(oper(20, 12))<br>'
+'oper = select_oper(2)<br>'
+'print(oper(20, 12))<br>'
+'oper = select_oper(3)<br>'
+'print(oper(20, 12))  <br>'
+'&ensp;<i>//32 8 240</i><br>'
+'</li>'
+'</ol>'
+'</td><td id="prav">'
+'<ul><li><h3>Лямбда-выражения</h3><br>'
+'<i>чур, громко не смеяться</i><br>Определение функции: '
+'lambda [параметры] : инструкция<br>-><br>'
+'message = lambda: print("Privet")<br>'
+'message() <i>//Privet</i><br>'
+'<i style="color:#a44">лямбда-выражение возвращает квадрат числа:</i><br>'
+'&ensp;square = lambda n: n*n<br>'
+'print(square(5)) <i>//25</i><br>'
+'print(square(8)) <i>//64</i><br>'
+'<i style="color:#44a">Аналогично с несколькими параметрами</i><br>'
+'&ensp;sum=lambda a, b: a+b<br>'
+'print(sum(7, 7)) <i>//14</i><br>'
+'print(sum(77, 67)) <i>//144</i><br>'
+'<i style="color:#424">лямбда-выражение в качестве параметра: </i><br>'
+'def do_oper(a, b, oper):<br>'
    +'&ensp;result = oper(a, b)<br>'
  +'  &ensp;print(f"result = {result}")<br>'
+'do_oper(9, 8, lambda a, b: a+b) <i>//17</i><br>'
+'do_oper(9, 8, lambda a, b: a*b)  <i>//72 </i>   <br>'
+'<i style="color:#848;font-size:13pt">Лямбда-выражение из функции:</i><br>'
+'def sel_oper(choice):<br>'
 +'   &ensp;&ensp;if choice==1:<br>'
   +'     &ensp;return lambda a, b: a+b<br>'
 +'  &ensp;&ensp; elif choice==2:<br>'
      +'  &ensp;&ensp;return lambda a, b: a-b<br>'
    +'&ensp;else:<br>'
  +'     &ensp;&ensp; return lambda a, b: a*b<br>'
+'oper=sel_oper(1)           <i>// sum</i><br>'
+'print(oper(15, 25))     <i>  //40</i><br>'
+'oper=sel_oper(2)     <i>// subtract</i><br>'
+'print(oper(15, 25)) <i>//-10</i><br>'
+'oper=sel_oper(3)    <i>// multiply</i><br>'
+'print(oper(15, 25)) <i>//375</i><br></li></ul>'
+'<ul><h4 style="margin:5px">Преобразование типов</h4>'
+'<i>Для примера:</i><br>'
+'a=2 <i>//int</i><br>'
+'b=2.5 <i>//float</i><br>'
+'c=a+b<br>'
+'print(c) <i>//4.5 (тут всё тип-топ)</i><br>'
+'<li><a>Неявные преобразования</a><br>'
+'<ul style="margin-left:20px">Если файлы разных типов, то действуют следующие правила:<br>'
+'<li type="disc">Если один из операндов комплексное число<b>(complex)</b>, то и '
+'второй становится тоже комплексным.</li>'
+'<li type="disc">Предположим, что операнд представляет из себя тип <b>float</b> то, '
+'собственно говоря, и ответ будет <b>float</b>. Это два.</li>'
+'<li type="disc">Иначе, оба будут <b>int</b> и преобразования не потребуется. Ответ '
+'тоже будет <b>int</b></li></ul>'
+'<a>Явные преобразования</a><br>'
+'a="2"<br>'
+'b=2.5<br>'
+'c=a+b<br>'
+'print(c) <i>//TypeError: can only concatenate str (not "float") to str'
+'(портянка однако)</i><hr style="color:yellow">'
+'<ul style="margin-left:20px"><li type="disc">int(): преобразует значение в целое число</li>'
+'<li type="disc">float(): преобразует значение в число с плавающей точкой</li>'
+'<li type="disc">str(): преобразует значение в строку</li></ul>'
+'<i>Рассматриваем:</i><br>'
+'<b>int</b><i>заценим шутку</i><br>'
+'a="2"<br>'
+'b=2<br>'
+'c=int(a)+b<br>'
+'print(c) <i>//4</i><br>'
+'<i style="font-size:14pt;">Примеры преобразований с помощью int()</i><br>'
+'&ensp;a = int(25)<br>&ensp; b = int(4.8)<br>&ensp; c = int( "5" )<br>'
+'&ensp;e = int(False)<br>&ensp; f = int(True)<br>'
+'&ensp;print(a, b, c, e, f) <i>//25 4 5 0 1</i><br>'
+'<i>Функция может быть не преобразована:</i><br>'
+'b = int("a1c") #error<br>'
+'c = int("3.5") #error<br>'
+'<b>float()</b>(аналогично)<br>'
+'a="2.7"<br>'
+'b=3<br>'
+'c=float(a)+b<br>'
+'print(c) <i>//5.7</i><br>'
+'<i>Ещё</i><br>'
+'a=float(15)<br>'
+'b=float(3.7)<br>'
+'c=float("4.5")<br>'
+'d=float("5.1")<br>'
+'e=float(False)<br>'
+'f=float(True)<br>'
+'print (a, b, c, d, e, f) <i>//15.0 3.7 4.5 5.1 0.0 1.0</i><br>'
+'<i>В float() перводятся только числа</i><br>'
+'d=float("abc") <i>#ошибка</i><br>'
+'<b>str()</b> str() - преобразует значение в строку<br>'
+'a=str(False)<br>'
+'b=str(True)<br>'
+'c=str(5)<br>'
+'d=str(5.7)<br>'
+'print(a, b, c, d) <i>//False True 5 5.7</i><br>'
+'<i>Внимательно смотрим:</i><br>'
+'age=45<br>'
+'message="Age: "+age<br>'
+'print(message) <i>#error (message="Age: "+age)</i><br>'
+'&ensp;message="Age: "+str(age)<br>'
+'print(message) <i>#Age: 45</i><br></li></ul>'
+'<h5>Область видимости переменных</h5><i>Есть два типа:</i><br>'
+'<li><a>Глобальный контекст</a> (видна везде и всюду)<br>'
+'name="Bobik"<br>'
+'def say_hi():<br>'
  +'&ensp;  print("Hello,", name)<br>'
+'def say_bye():<br>'
  +'&ensp;  print("Good bye,", name)<br>'
+'say_hi() <i>#Hello, Bobik</i><br>'
+'say_bye() <i>#Good bye, Bobik</i> <br></li>'
+'<li><a>Локальный контекст</a> (переменная определяется и действуте только внутри '
+'функции)<br>'
+'def say_hi():<br>'
+'    name="John"<br>'
    +'surname="Conor"<br>'
  +'  print("Hello, ",name, surname)<br>'
+'def say_bye():<br>'
    +'name="Sara"<br>'
  +'  print("Good bye, ", name)<br>'
+'say_hi() <i>#Hello,  John Conor</i><br>'
+'say_bye() <i>#Good bye,  Sara</i>       <br></li>'
+'<li><a>Скрытие переменных</a> (ещё один несложный споооб сокрытия)<br>'
+'name="Tomik"<br>'
+'def say_hi():<br>'
    +'&ensp;name="Bobik" #это мы так скрыли глобальную переменную<br>'
  +'  &ensp;print("Hello, ",name)<br>'
+'def say_bye():<br>'
  +'  &ensp;print("Good Bye, ",name)<br>'
+'say_hi() <i>#Hello,  Bobik</i><br>'
+'say_bye() <i>#Good Bye,  Tomik</i><br>'
+'<a>nonlocal</a>'
+'<i>вывод ответов внешней и внутренней функции:</i><br>'
+'def outer(): <i>//внешняя функция</i><br>'
 +'&ensp;   n=5<br>'
+' &ensp;   def inner(): <i>//вложенная функция</i><br>'
    +'   &ensp;&ensp; n=25<br>'
  +'     &ensp;&ensp; print(n)<br>'
+'outer() <i>//25 5(вложенная, внешняя)</i><br>'
+'<i>Иначе указываем nonlocal n и оба значения будут из внутренней функции</i><br>'		
+'</li></ul>'
+'</td></table>'
let obl;
obl='<table><td id="lev">'
+'<ul><a>Область видимости</a><br>'
+'<li><h4>Глобальный контекст</h4><div style="color:green">-функция видна отовсюду(везде)</div>'
+'name="Bobik"<br>'
+'def say_hi():<br>'
  +'&ensp;  print("Hello,", name)<br>'
+'def say_bye():<br>'
  +'&ensp;  print("Good bye,", name)<br>'
+'say_hi() <i>//Hello, Bobik</i><br>'
+'say_bye() <i>//Good bye, Bobik</i> <br>'       
+'</li>'
+'<li><h4>Локальный контекст</h4>'
+'<div style="color:maroon;font-size:14pt">функция доступна только там, где объявлена</div>'
+'def say_hi():<br>'
    +'&ensp;name="Bobik"<br>'
    +'&ensp;surname=" Bobroff"<br>'
  +'  &ensp;print("Hello, ",name,surname)<br>'
+'say_hi() <i>//Hello,  Bobik  Bobroff</i><br>'
+'def say_bye():<br>'
    +'&ensp;name="Grog"<br>'
  +' &ensp; print("Good bye, ",name)<br>'
+'say_bye() <i>//Good bye,  Grog</i><br>'            
+'</li>'
+'<li><h4>Скрытие переменных</h4>'
+'<i>Ещё один вариант, как можно скрыть переменную</i><br>'
+'name="Idiot"<br>'
+'def say_hi():<br>'
  +'&ensp;  name="Debil" <i>#скрываем переменную</i><br>'
    +'&ensp;print("Nu, zdorovo, ", name)<br>'
+'def say_bye():<br>'
  +'  &ensp;print("Poka, ",name)<br>'
+'say_hi() <i>//Nu, zdorovo,  Debil</i><br>'
+'say_bye() <i>//Poka,  Idiot</i>       <br>'
+'<i>Меняем в локальной функции глобальную(не локальную) переменную:</i><br>'
+'name="Bill"<br>'
+'def say_hi():<br>'
    +'&ensp;global name<br>'
    +'&ensp;name="Todd" <i>#значение глобальной переменной</i><br>'
  +'  &ensp;print("Hello, ",name)<br>'
+'def say_bye():<br>'
  +'  &ensp;print("Good bye, ",name)<br>'
+'say_hi()  <i>#Hello,  Todd</i><br>'
+'say_bye()  <i>#Good bye,  Todd</i><br>'
+'<a>nonlocal</a> (идентификатор переменной внешнеё функции)<br>'
+'def outher():<br>'
    +'&ensp;n=5<br>'
    +'&ensp;def inner(): <i>#вложенная функция</i><br>'
      +' &ensp;&ensp; print(n)<br>'
    +'&ensp;inner() <i>#5</i><br>'
  +'  &ensp;print(n)    <br>'
+'outher() <i>#5</i>   <br>' 
+'<i>А теперь, вложенная функция присваивает значение переменной:</i><br>'
+'def outer(): <i>#внешняя функция</i><br>'
  +'&ensp;  n=15<br>'
+'  &ensp;  def inner():<i> #вложенная функция</i><br>'
        +'&ensp;&ensp;n=25<br>'
      +'  &ensp;&ensp;print(n)<br>'
    +'&ensp;inner() <i>#25</i><br>'
  +'  &ensp;print(n)<br>'
+'outer()    <i>#15 (так и должно быть)</i><br>'
+'<i><div style="font-size:14pt;color:green">следующий пример:</div>(non local указывает, что перменная из окружающей функции)</i><br>'
+'def outer(): <i>#внешняя функция</i><br>'
    +'&ensp;n=10<br>'
  +'  &ensp;def inner(): <i>#вложенная функция</i><br>'
+'        &ensp;&ensp;nonlocal n <i># n - переменная</i><br>'
        +'&ensp;&ensp;n=30<br>'
      +'  &ensp;&ensp;print(n)<br>'
    +'&ensp;inner() <i>#30</i><br>'
  +'  &ensp;print(n)  <br>'
+'outer()    <i>  #30</i><br>'
+'<a></a><br>'
+'</li>'
+'<li><h4></h4></li>'
+'</ul>'
+'</td><td id="prav">'
+'<ul><h3>Замыкания</h3>'
+'<li><b>Замыкание</b>(функция выполняется везде)<br><ul style="margin-left:20px">'
+'<i>Имеет три компонента:</i>'
+'<li type="disc">внешняя переменная, которая определяет некоторую область видимости и в которой '
+'определены некоторые переменные и парметры - лексическое окружение</li>'
+'<li type="disc">переменные и параметры(лексическое окружение), которые определены во '
+'внешней функции</li>'
+'<li type="disc">вложенная функция, которая использует переменные и параметры внешней функции</li>'
+'</ul><hr><i>Ща, покажем:</i><br>'
+'def outer(): <i>#внешняя функция</i><br>'
  +'&ensp;  n=10     <i>#лексическое значение</i><br>'
+'  &ensp;  def inner(): <i>#локальная функция</i><br>'
        +'&ensp;&ensp;nonlocal n<br>'
      +'  &ensp;&ensp;n += 5 <i>#операция с лексическим окружением</i><br>'
    +'    &ensp;&ensp;print(n)<br>'
  +'  &ensp;return inner<br>'
+'fn=outer() <i>#fn=inner, так как возвращается функция inner<br>'
+'&ensp;&ensp;&ensp;#далее вызываем внутреннюю функцию inner</i><br>'
+'fn() <i>#15</i><br>'
+'fn() <i>#20</i><br>'
+'fn() <i>#25   </i><br>'
+'</li>'
+'<li><b>Применение парметров</b><br>'
+'def multiplay(n):<br>'
  +'&ensp;  def inner(m): return n*m<br>'
    +'&ensp;return inner<br>'
+'fn=multiplay(10)<br>'
+'&ensp;print(fn(5)) <i>#50</i><br>'
+'&ensp;print(fn(10))<i>#100</i><br>'
+'&ensp;print(fn(15))<i>#150</i><br>'
+'<b>#при помощи лямбд:</b><br>'
+'def multiplay(n): return lambda m: m*n<br>'
+'&ensp;fn=multiplay(6)<br>'
+'print(fn(8)) <i>#48</i><br>'
+'print(fn(12))<i>#72</i><br>'
+'print(fn(15)) <i>#90</i><br>'
+'</li>'
+'<li><a>Декораторы</a><br>'
+'<i> декоратор - это функция, которая позволяет обернуть другую функцию для '
+'расширения её функциональности без изменения её кода</i><br>'
+'def decorator_function(func):<br>'
  +'  &ensp;def wrapper():<br>'
    +'    &ensp;print("Функция-обёртка!")<br>'
      +'  &ensp;print("Оборачиваемая функция: {}" .format(func))<br>'
        +'&ensp;print("Выполняем обёртку..")<br>'
+'       &ensp;&ensp; func()<br>'
  +'      &ensp;&ensp;print("Выходим из обёртки")<br>'
    +'&ensp;return wrapper <i>#написали функцию</i><br>'
+'@decorator_function<br>'
+'def hello_world():<br>'
  +'&ensp;      print("Hello world!")<br>'
+'hello_world()<br>'
+'<i>#Функция-обёртка!<br>'
+'Оборачиваемая функция: <function hello_world at 0x000000E773D49080><br>'
+'Выполняем обёртку..<br>'
+'Hello world!<br>'
+'Выходим из обёртки</i><br>'	
+'</li>'
+'<li><b>Получение параметров функции</b><br>'
+'<i>Перехват параметров функции декоратором:</i><br>'
+'#<i>определение функции декотратора</i><br>'
+'def check(input_func):<br>'
    +'def output_func(*args): #<i>args - значения оригинальной функции</i><br>'
    +'    input_func(*args) #<i>оригинальная функция</i><br>'
  +'  return output_func #<i>возращаем новую функцию</i><br>'
+'#<i>определение оригинальной функции</i><br>'
+'<a>@check</a><br>'
+'def print_person(name, age):<br>'
  +'  print(f"Name: {name} Age: {age}")<br>'
+'#<i>оригинальная функция</i><br>'
+'print_person("Bob", 48)       <br>'     
+'//<i>Name: Bob Age: 48</i><br>'
+'//Тут просто получаем значения из внутренней функии(бред, а что делать)<br>'
+'Если в функцию будет добавлено неприемлимое значение, то осуществляется проверка и модификация<br>'

+'</li>'
+'</ul>'
+'</td></table>'

document.write(obl);//ret cik per